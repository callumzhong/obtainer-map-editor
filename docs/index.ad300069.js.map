{"mappings":"AAAA,SAAAA,kBAAAC,EAAAC,mpDAAA,IAAMC,OAASC,SAASC,cAAc,UAChCC,gBAAkBF,SAASC,cAAc,qBACzCE,aAAeH,SAASC,cAAc,kBACtCG,YAAcJ,SAASC,cAAc,kBACvCI,eAAiB,CAAC,EAAG,GAErBC,aAAc,EACdC,cAAgB,EAEhBC,OAAS,CAER,GAIA,GAEJ,IAIKC,YAAc,WACnB,IAAMC,EAAOV,SAASW,cAAc,KACpCD,EAAKE,SAAW,mBAChBF,EAAKG,KAAOd,OAAOe,YACnBJ,EAAKK,SAIAC,YAAc,WACnBR,OAAS,CAAC,GAAI,GAAI,IAClBS,QAGKC,SAAW,SAACC,EAAUC,GACvBA,GACHA,EAASC,UAAUC,OAAO,UAE3Bf,eAAiBY,EAASI,QAAQC,MAClCL,EAASE,UAAUI,IAAI,WAIlBC,UAAY,SAACC,GAClB,IAAiBC,EAAAD,EAAEE,OAAOC,wBAAlBC,EAASH,EAATG,EAAGC,EAAMJ,EAANI,EACLC,EAASN,EAAEO,QAAUH,EACrBI,EAASR,EAAES,QAAUJ,EAC3B,MAAO,CAACK,KAAKC,MAAML,EAAS,IAAKI,KAAKC,MAAMH,EAAS,MAGhDlB,KAAO,WACZ,IAAMsB,EAAMxC,OAAOyC,WAAW,MAC9BD,EAAIE,UAAU,EAAG,EAAG1C,OAAO2C,MAAO3C,OAAO4C,QAGzCnC,OAAOoC,SAAQ,SAACpB,GACfqB,OAAOC,KAAKtB,GAAOoB,SAAQ,SAACG,GAE3B,IAAMC,EAAYC,OAAOF,EAAIG,MAAM,KAAK,IAClCC,EAAYF,OAAOF,EAAIG,MAAM,KAAK,IACfE,EAAUC,eAAV7B,EAAMuB,GAAI,GAA9BO,EAAoBF,EAAU,GAArBG,EAAWH,EAAU,GAEnCb,EAAIiB,UACHpD,YACU,GAAVkD,EACU,GAAVC,EAZkB,GAAA,GAeN,GAAZP,EACY,GAAZG,EAhBkB,GAAA,WAyBhBM,QAAU,SAACC,GAChB,IAAIC,EAAUjC,UAAUgC,GAClBX,EAAMY,EAAQ,GAAK,IAAMA,EAAQ,GACnCD,EAAWE,gBACPpD,OAAOD,eAAewC,GAE7BvC,OAAOD,eAAewC,GAAO,CAAC1C,eAAe,GAAIA,eAAe,IAEjEY,QAIDlB,OAAO8D,iBAAiB,aAAa,WACpCvD,aAAc,KAEfP,OAAO8D,iBAAiB,WAAW,WAClCvD,aAAc,KAEfP,OAAO8D,iBAAiB,cAAc,WACrCvD,aAAc,KAEfP,OAAO8D,iBAAiB,YAAaJ,SACrC1D,OAAO8D,iBAAiB,aAAa,SAACC,GACjCxD,aACHmD,QAAQK,MAKV5D,gBAAgB2D,iBAAiB,aAAa,SAACC,GAC9CzD,eAAiBqB,UAAUoC,GAC3B3D,aAAa4D,MAAMC,KAA2B,GAApB3D,eAAe,GAAU,KACnDF,aAAa4D,MAAME,IAA0B,GAApB5D,eAAe,GAAU,QAGnDL,SACEkE,iBAAiB,6BACjBtB,SAAQ,SAACpB,EAAO2C,EAAKC,GACrB5C,EAAMqC,iBAAiB,SAAS,SAACC,GAChC,IAAI1C,EAAYiD,mBAAGD,GAAQE,MAAK,SAACC,UAAMA,EAAEC,UAAUC,SAAS,aAC5DvD,SAAS4C,EAAMjC,OAAQT,SAI1BpB,SACEC,cAAc,4CACd4D,iBAAiB,QAAS7C,aAE5BhB,SACEC,cAAc,4CACd4D,iBAAiB,QAASpD,aAE5BL,YAAYsE,OAAS,WACpBzD,QAED,IAAM0D,aACLC,aAAaC,QAAQ,UACrB,iEAEDzE,YAAY0E,IAAMH","sources":["src/app.js"],"sourcesContent":["const canvas = document.querySelector('canvas');\nconst puzzleContainer = document.querySelector('.puzzle-container');\nconst puzzleTarget = document.querySelector('.puzzle-target');\nconst puzzleImage = document.querySelector('.puzzle-source');\nlet puzzleTargetXY = [0, 0];\n\nlet isMouseDown = false;\nlet currentTarget = 0;\n\nlet layers = [\n\t// 底層\n\t{\n\t\t// schema: \"canvas_x-canvas_y\":[\"puzzle_x\",\"puzzle_y\"]\n\t},\n\t// 中層\n\t{},\n\t// 上層\n\t{},\n];\n\n//converts data to image:data string and pipes into new browser tab\nconst exportImage = () => {\n\tconst link = document.createElement('a');\n\tlink.download = 'obtainer-map.png';\n\tlink.href = canvas.toDataURL();\n\tlink.click();\n};\n\n//Reset state to empty\nconst clearCanvas = () => {\n\tlayers = [{}, {}, {}];\n\tdraw();\n};\n\nconst setLayer = (newLayer, oldLayer) => {\n\tif (oldLayer) {\n\t\toldLayer.classList.remove('active');\n\t}\n\tcurrentTarget = +newLayer.dataset.layer;\n\tnewLayer.classList.add('active');\n};\n\n//Utility for getting coordinates of mouse click\nconst getCoords = (e) => {\n\tconst { x, y } = e.target.getBoundingClientRect();\n\tconst mouseX = e.clientX - x;\n\tconst mouseY = e.clientY - y;\n\treturn [Math.floor(mouseX / 32), Math.floor(mouseY / 32)];\n};\n\nconst draw = () => {\n\tconst ctx = canvas.getContext('2d');\n\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\tconst size_of_crop = 32;\n\n\tlayers.forEach((layer) => {\n\t\tObject.keys(layer).forEach((key) => {\n\t\t\t//Determine x/y position of this placement from key (\"3-4\" -> x=3, y=4)\n\t\t\tconst positionX = Number(key.split('-')[0]);\n\t\t\tconst positionY = Number(key.split('-')[1]);\n\t\t\tlet [puzzleX, puzzleY] = layer[key];\n\n\t\t\tctx.drawImage(\n\t\t\t\tpuzzleImage,\n\t\t\t\tpuzzleX * 32,\n\t\t\t\tpuzzleY * 32,\n\t\t\t\tsize_of_crop,\n\t\t\t\tsize_of_crop,\n\t\t\t\tpositionX * 32,\n\t\t\t\tpositionY * 32,\n\t\t\t\tsize_of_crop,\n\t\t\t\tsize_of_crop,\n\t\t\t);\n\t\t});\n\t});\n};\n\n//Handler for placing new tiles on the map\nconst addTile = (mouseEvent) => {\n\tvar clicked = getCoords(mouseEvent);\n\tconst key = clicked[0] + '-' + clicked[1];\n\tif (mouseEvent.shiftKey) {\n\t\tdelete layers[currentTarget][key];\n\t} else {\n\t\tlayers[currentTarget][key] = [puzzleTargetXY[0], puzzleTargetXY[1]];\n\t}\n\tdraw();\n};\n\n//Bind mouse events for painting (or removing) tiles on click/drag\ncanvas.addEventListener('mousedown', () => {\n\tisMouseDown = true;\n});\ncanvas.addEventListener('mouseup', () => {\n\tisMouseDown = false;\n});\ncanvas.addEventListener('mouseleave', () => {\n\tisMouseDown = false;\n});\ncanvas.addEventListener('mousedown', addTile);\ncanvas.addEventListener('mousemove', (event) => {\n\tif (isMouseDown) {\n\t\taddTile(event);\n\t}\n});\n\n//Select tile from the Tiles grid\npuzzleContainer.addEventListener('mousedown', (event) => {\n\tpuzzleTargetXY = getCoords(event);\n\tpuzzleTarget.style.left = puzzleTargetXY[0] * 32 + 'px';\n\tpuzzleTarget.style.top = puzzleTargetXY[1] * 32 + 'px';\n});\n\ndocument\n\t.querySelectorAll('.controller__layer button')\n\t.forEach((layer, idx, layers) => {\n\t\tlayer.addEventListener('click', (event) => {\n\t\t\tlet oldLayer = [...layers].find((i) => i.className.includes('active'));\n\t\t\tsetLayer(event.target, oldLayer);\n\t\t});\n\t});\n\ndocument\n\t.querySelector('.controller__buttons>button:nth-child(1)')\n\t.addEventListener('click', clearCanvas);\n\ndocument\n\t.querySelector('.controller__buttons>button:nth-child(2)')\n\t.addEventListener('click', exportImage);\n\npuzzleImage.onload = function () {\n\tdraw();\n};\nconst currentImage =\n\tlocalStorage.getItem('image') ||\n\t'https://assets.codepen.io/21542/TileEditorSpritesheet.2x_2.png';\n\npuzzleImage.src = currentImage;\n"],"names":["_arrayLikeToArray","arr","len","canvas","document","querySelector","puzzleContainer","puzzleTarget","puzzleImage","puzzleTargetXY","isMouseDown","currentTarget","layers","exportImage","link","createElement","download","href","toDataURL","click","clearCanvas","draw","setLayer","newLayer","oldLayer","classList","remove","dataset","layer","add","getCoords","e","ref","target","getBoundingClientRect","x","y","mouseX","clientX","mouseY","clientY","Math","floor","ctx","getContext","clearRect","width","height","forEach","Object","keys","key","positionX","Number","split","positionY","_key","_slicedToArray","puzzleX","puzzleY","drawImage","addTile","mouseEvent","clicked","shiftKey","addEventListener","event","style","left","top","querySelectorAll","idx","layers1","_toConsumableArray","find","i","className","includes","onload","currentImage","localStorage","getItem","src"],"version":3,"file":"index.ad300069.js.map"}